AWSTemplateFormatVersion: 2010-09-09
Description: (SO0072-scheduler) Deploy scheduler host (v2.7.2)
Parameters:
  SubnetId:
    Type: AWS::EC2::Subnet::Id

  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: For security reason, limit SSH to known networks

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  SchedulerInstanceType:
    Type: String

  SchedulerIAMInstanceProfile:
    Type: String

  S3InstallFolder:
    Type: String

  S3Bucket:
    Type: String

  ClusterId:
    Type: String

  EFSAppsDns:
    Type: String

  EFSDataDns:
    Type: String

  ImageId:
    Type: String

  BaseOS:
    Type: String

  Version:
    Type: String

  UserName:
    Type: String

  UserPassword:
    Type: String

  SchedulerPublicIP:
    Type: String

Conditions:
  UseAmazonLinux: !Equals [ !Ref BaseOS, 'amazonlinux2']

Resources:
  SchedulerEC2Host:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      DisableApiTermination: false
      InstanceType: !Ref SchedulerInstanceType
      IamInstanceProfile:
        Ref: SchedulerIAMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: !If [UseAmazonLinux, "/dev/xvda", "/dev/sda1"]
          Ebs:
            VolumeSize: 150
            VolumeType: gp3
            Encrypted: true

      KeyName: !Ref SSHKeyPair
      SecurityGroupIds: !Ref SecurityGroupId
      SubnetId: !Ref SubnetId

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Scheduler
        - Key: soca:KeepForever
          Value: "true"
        - Key: soca:ClusterId
          Value: !Sub ${ClusterId}
        - Key: soca:NodeType
          Value: scheduler
        - Key: soca:BackupPlan
          Value: !Sub ${ClusterId}

      UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe

            export PATH=$PATH:/usr/local/bin
            # Deactivate shell to make sure users won't access the cluster if it's not ready
            echo '
            ************* SOCA FIRST TIME CONFIGURATION *************
            Hold on, cluster is not ready yet.
            Please wait ~30 minutes as SOCA is being installed.
            Once cluster is ready to use, this message will be replaced automatically and you will be able to SSH.
            *********************************************************' > /etc/nologin

            if [ "${BaseOS}" == "amazonlinux2" ] || [ "${BaseOS}" == "rhel7" ];
              then
                usermod --shell /usr/sbin/nologin ec2-user
            fi

            if [ "${BaseOS}" == "centos7" ];
              then
                usermod --shell /usr/sbin/nologin centos
            fi

            # Install awscli
            if [ "${BaseOS}" == "centos7" ] || [ "${BaseOS}" == "rhel7" ];
            then
              yum install -y python3-pip
              PIP=$(which pip3)
              $PIP install awscli
              export PATH=$PATH:/usr/local/bin
            fi

            # Disable automatic motd update if using ALI
            if [ "${BaseOS}" == "amazonlinux2" ];
            then
              /usr/sbin/update-motd --disable
              rm /etc/cron.d/update-motd
              rm -f /etc/update-motd.d/*
            fi

            AWS=$(which aws)
            echo export "SOCA_BASE_OS=${BaseOS}" >> /etc/environment
            echo export "SOCA_CONFIGURATION=${ClusterId}" >> /etc/environment
            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3Bucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environment
            echo export "SOCA_VERSION=${Version}" >> /etc/environment
            echo export "SOCA_INSTALL_AMI=${ImageId}" >> /etc/environment
            echo export "SOCA_AUTH_PROVIDER=openldap" >> /etc/environment
            echo export "SOCA_LDAP_BASE=\"DC=soca,DC=local\"" >> /etc/environment
            source /etc/environment

            # Tag EBS disks manually as CFN ASG does not support it
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed "s/[a-z]$//"`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            EBS_IDS=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "Volumes[*].[VolumeId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $EBS_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Root Disk" "Key=soca:ClusterId,Value=${ClusterId}"

            # Tag Network Adapter for the Scheduler
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "NetworkInterfaces[*].[NetworkInterfaceId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $ENI_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Scheduler Network Adapter" "Key=soca:ClusterId,Value=${ClusterId}"

            AWS=$(which aws)
            S3_BUCKET_REGION=$(curl -s --head ${S3Bucket}.s3.amazonaws.com | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
            REGION_OPT="--region $S3_BUCKET_REGION"
            echo "@reboot $AWS $REGION_OPT s3 cp s3://${S3Bucket}/${S3InstallFolder}/scripts/SchedulerPostReboot.sh /root && /bin/bash /root/SchedulerPostReboot.sh ${S3Bucket} ${S3InstallFolder} ${UserName} '${UserPassword}' >> /root/PostRebootConfig.log 2>&1" | crontab -
            $AWS $REGION_OPT s3 cp s3://${S3Bucket}/${S3InstallFolder}/scripts/config.cfg /root/
            $AWS $REGION_OPT s3 cp s3://${S3Bucket}/${S3InstallFolder}/scripts/requirements.txt /root/
            $AWS $REGION_OPT s3 cp s3://${S3Bucket}/${S3InstallFolder}/scripts/Scheduler.sh /root/
            /bin/bash /root/Scheduler.sh efs ${EFSDataDns} efs ${EFSAppsDns} >> /root/Scheduler.sh.log 2>&1

  EIPAssociationToScheduler:
    DependsOn: SchedulerEC2Host
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref SchedulerPublicIP
      InstanceId: !Ref SchedulerEC2Host

Outputs:
  SchedulerInstanceId:
    Value: !Ref SchedulerEC2Host
  SchedulerPrivateIP:
    Value: !GetAtt SchedulerEC2Host.PrivateIp
  SchedulerPrivateDnsName:
    Value: !GetAtt SchedulerEC2Host.PrivateDnsName
